

class Solution {
public:
    vector<int> largestDivisibleSubset(vector<int>& nums) {
        int large=INT_MIN;
        if(nums.size() <2) return nums;
        sort(nums.begin(), nums.end());
    // just like LIS
        vector<int> dp(nums.size() , 1);
        for(int i=1;i<nums.size();i++)
        {
            for(int j=0;j<i;j++)
            {
                if(nums[i]%nums[j]==0)
                    dp[i]=max(dp[i] , 1+dp[j]);
                 if(dp[i]>large)
                     large=dp[i];
            }
        }
            vector<int> res;
            int prev=-1;
            for(int i=nums.size()-1;i>=0;i--)
            {
                if(dp[i]==large && (prev%nums[i]==0 || prev==-1))
                {
                    res.push_back(nums[i]);
                    large=large-1;
                    prev=nums[i];
                }
            }
        
        return res;
    }
};