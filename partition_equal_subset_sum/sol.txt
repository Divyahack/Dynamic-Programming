

class Solution {
public:
   bool subset_sum(vector<int> nums , int target)
   {
       int size=nums.size();
       vector<vector<int>> dp(size+1 , vector<int> (target+1));
   
        for(int i=0;i<=size;i++)
            dp[i][0]=1;
       for(int i=1;i<=target;i++)
           dp[0][i]=0;
       
       for(int i=1;i<=size;i++)
       {
           for(int j=1;j<=target;j++)
           {
               if(j<nums[i-1])
                   dp[i][j]=dp[i-1][j];
               if(j>=nums[i-1])
                   dp[i][j]=dp[i-1][j] || dp[i-1][j-nums[i-1]];
           }
       }
       return dp[size][target];
   }
    
    
    bool canPartition(vector<int>& nums) {
     if(nums.size()<2)
         return false;
        int sum=0;
        for(int i=0;i<nums.size();i++)
            sum+=nums[i];
        
        if(sum%2==1)
            return false;
        return subset_sum(nums ,sum/2 );
    }
};
