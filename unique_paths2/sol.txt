


class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
       int r = obstacleGrid.size();
        int c = obstacleGrid[0].size();
        

 if ( r== 0 || c == 0)
 {
            return 0;
        }
        
      
        vector<vector<int>> dp (r , vector<int> (c , 0));
        
        // first column
        for (int i = 0; i < r; i++) {
            if (obstacleGrid[i][0] != 1)
            {
                dp[i][0] = 1;
            } 
            else
            {
                break;
            }
        }
        
        // first row
        for (int j = 0; j < c; j++) {
            if (obstacleGrid[0][j] != 1) {
                dp[0][j] = 1;
            } else {
                break;
            }
        }
        
        // for spaces not at first row or first column
        for (int i = 1; i < r; i++) {
            for (int j = 1; j < c; j++) {
                if (obstacleGrid[i][j] != 1) {
                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1];
                }                
            }
        }
        
        return dp[r - 1][c - 1];
    }
};


